#INTEGRANTES:
# Marcela Torro RM557658 <3
# Rodrigo RM550266

import heapq
import random
import time
from collections import deque
import matplotlib.pyplot as plt

# ---------- cores ----------
class Cor:
    RESET = '\033[0m'
    VERMELHO = '\033[91m'
    VERDE = '\033[92m'
    AMARELO = '\033[93m'
    AZUL = '\033[94m'
    CIANO = '\033[96m'
    NEGRITO = '\033[1m'

# ---------- classes ----------

class Ocorrencia:
    def __init__(self, regiao, severidade, descricao):
        self.regiao = regiao
        self.severidade = severidade
        self.descricao = descricao
        self.timestamp = time.time()  # Adiciona timestamp para ordena√ß√£o secund√°ria

    def __lt__(self, other):
        # Prioriza por severidade, em caso de empate usa timestamp (mais antigo primeiro)
        if self.severidade == other.severidade:
            return self.timestamp < other.timestamp
        return self.severidade > other.severidade  

    def __str__(self):
        return f"üìç [{self.regiao}] | üî• Severidade: {self.severidade} | üìù {self.descricao}"

# lista para historico

class NoHistorico:
    def __init__(self, ocorrencia):
        self.ocorrencia = ocorrencia
        self.proximo = None

class ListaHistorico:
    def __init__(self):
        self.inicio = None
        self.tamanho = 0

    def adicionar(self, ocorrencia):
        novo = NoHistorico(ocorrencia)
        novo.proximo = self.inicio
        self.inicio = novo
        self.tamanho += 1

    def listar(self):
        if not self.inicio:
            print("üï∏Ô∏è Nenhum atendimento registrado.")
            return
            
        atual = self.inicio
        while atual:
            print(f"{Cor.CIANO}{atual.ocorrencia}{Cor.RESET}")
            atual = atual.proximo
            
    def tamanho(self):
        return self.tamanho

# √Årvore para organizar ocorr√™ncias por regi√£o
class NoArvore:
    def __init__(self, regiao):
        self.regiao = regiao
        self.ocorrencias = []
        self.esquerda = None
        self.direita = None

class ArvoreRegioes:
    def __init__(self):
        self.raiz = None
        
    def inserir(self, regiao, ocorrencia):
        if not self.raiz:
            self.raiz = NoArvore(regiao)
            self.raiz.ocorrencias.append(ocorrencia)
        else:
            self._inserir_recursivo(self.raiz, regiao, ocorrencia)
    
    def _inserir_recursivo(self, no, regiao, ocorrencia):
        if regiao < no.regiao:
            if no.esquerda is None:
                no.esquerda = NoArvore(regiao)
                no.esquerda.ocorrencias.append(ocorrencia)
            else:
                self._inserir_recursivo(no.esquerda, regiao, ocorrencia)
        elif regiao > no.regiao:
            if no.direita is None:
                no.direita = NoArvore(regiao)
                no.direita.ocorrencias.append(ocorrencia)
            else:
                self._inserir_recursivo(no.direita, regiao, ocorrencia)
        else:
            no.ocorrencias.append(ocorrencia)
    
    def listar_por_regiao(self, regiao):
        return self._buscar(self.raiz, regiao)
    
    def _buscar(self, no, regiao):
        if no is None:
            return []
        if regiao == no.regiao:
            return no.ocorrencias
        if regiao < no.regiao:
            return self._buscar(no.esquerda, regiao)
        return self._buscar(no.direita, regiao)
    
    def listar_todas_regioes(self):
        regioes = []
        self._in_order_traversal(self.raiz, regioes)
        return regioes
    
    def _in_order_traversal(self, no, regioes):
        if no:
            self._in_order_traversal(no.esquerda, regioes)
            regioes.append(no.regiao)
            self._in_order_traversal(no.direita, regioes)

# ---------- sistema principal ----------

class FireResponseSim:
    def __init__(self):
        self.heap_ocorrencias = []  # Heap para prioriza√ß√£o
        self.fila_espera = deque()  # Fila para ocorr√™ncias em espera
        self.historico = ListaHistorico()  # Lista ligada para hist√≥rico
        self.arvore_regioes = ArvoreRegioes()  # √Årvore para organizar por regi√£o
        self.total_ocorrencias = 0

    def inserir_ocorrencia(self, regiao, severidade, descricao):
        ocorrencia = Ocorrencia(regiao, severidade, descricao)
        self.total_ocorrencias += 1
        
        # Adiciona na √°rvore de regi√µes
        self.arvore_regioes.inserir(regiao, ocorrencia)
        
        # Adiciona no heap ou na fila de espera
        if len(self.heap_ocorrencias) < 5:
            heapq.heappush(self.heap_ocorrencias, ocorrencia)
        else:
            self.fila_espera.append(ocorrencia)
            
        print(f"{Cor.VERDE}‚úÖ Nova ocorr√™ncia registrada com sucesso!{Cor.RESET}")
        print(f"   Regi√£o: {regiao} | Severidade: {severidade} | ID: #{self.total_ocorrencias}")

    def atender_ocorrencia(self):
        if self.heap_ocorrencias:
            ocorrencia = heapq.heappop(self.heap_ocorrencias)
            self.historico.adicionar(ocorrencia)
            print(f"{Cor.AMARELO}üö® Atendimento em andamento:{Cor.RESET}")
            print(f"{Cor.AMARELO}   {ocorrencia}{Cor.RESET}")
            
            # Se houver ocorr√™ncias na fila de espera, move uma para o heap
            if self.fila_espera:
                nova = self.fila_espera.popleft()
                heapq.heappush(self.heap_ocorrencias, nova)
                print(f"{Cor.VERDE}üìã Ocorr√™ncia movida da fila de espera para atendimento priorit√°rio.{Cor.RESET}")
        else:
            print(f"{Cor.VERMELHO}‚ö†Ô∏è Nenhuma ocorr√™ncia dispon√≠vel para atendimento.{Cor.RESET}")

    def listar_ocorrencias_pendentes(self):
        print(f"{Cor.AZUL}\nüîÑ Ocorr√™ncias Pendentes (Prioridade):{Cor.RESET}")
        if not self.heap_ocorrencias:
            print("üï∏Ô∏è Nenhuma ocorr√™ncia priorit√°ria pendente.")
        else:
            # Cria uma c√≥pia do heap para n√£o afetar a estrutura original
            heap_copia = self.heap_ocorrencias.copy()
            while heap_copia:
                ocorrencia = heapq.heappop(heap_copia)
                print(f"üî• {ocorrencia}")
                
        print(f"{Cor.AZUL}\n‚è≥ Fila de Espera:{Cor.RESET}")
        if not self.fila_espera:
            print("üï∏Ô∏è Nenhuma ocorr√™ncia na fila de espera.")
        else:
            for i, ocorrencia in enumerate(self.fila_espera):
                print(f"‚è±Ô∏è {i+1}. {ocorrencia}")

    def listar_historico(self):
        print(f"{Cor.CIANO}\nüìö Hist√≥rico completo de ocorr√™ncias atendidas:{Cor.RESET}")
        self.historico.listar()

    def gerar_relatorio_por_regiao(self):
        print(f"{Cor.AZUL}\nüìä Relat√≥rio de Atendimentos por Regi√£o:{Cor.RESET}")
        regioes = self.arvore_regioes.listar_todas_regioes()
        
        if not regioes:
            print("üèúÔ∏è Nenhuma regi√£o com ocorr√™ncias registradas.")
            return
        
        for regiao in regioes:
            ocorrencias = self.arvore_regioes.listar_por_regiao(regiao)
            print(f"\n{Cor.NEGRITO}{Cor.VERDE}üåç Regi√£o: {regiao}{Cor.RESET}")
            print(f"üìà Total de ocorr√™ncias: {len(ocorrencias)}")
            
            if ocorrencias:
                severidade_total = sum(o.severidade for o in ocorrencias)
                media_severidade = severidade_total / len(ocorrencias)
                print(f"üî• Severidade m√©dia: {media_severidade:.1f}")
                
                print(f"\n{Cor.AMARELO}Listagem de ocorr√™ncias:{Cor.RESET}")
                for o in ocorrencias:
                    print(f"  - {o.descricao} (Severidade: {o.severidade})")
                    
    # -------------------  Gr√°fico de severidade :) 
    
    def gerar_grafico_severidade_por_regiao(self):
        regioes = self.arvore_regioes.listar_todas_regioes()
        if not regioes:
            print("üèúÔ∏è Nenhuma regi√£o com ocorr√™ncias registradas para gerar gr√°fico.")
            return
        
        regioes_grafico = []
        severidades_medias = []
        
        for regiao in regioes:
            ocorrencias = self.arvore_regioes.listar_por_regiao(regiao)
            if ocorrencias:
                media = sum(o.severidade for o in ocorrencias) / len(ocorrencias)
                regioes_grafico.append(regiao)
                severidades_medias.append(media)
        
        plt.figure(figsize=(8,5))
        plt.bar(regioes_grafico, severidades_medias, color='orange')
        plt.title('Severidade M√©dia das Ocorr√™ncias por Regi√£o')
        plt.xlabel('Regi√£o')
        plt.ylabel('Severidade M√©dia')
        plt.ylim(0,10)
        plt.grid(axis='y', linestyle='--', alpha=0.7)
        plt.show()

    def simular_chamadas(self, n=5):
        regioes = ['Norte', 'Sul', 'Leste', 'Oeste', 'Centro']
        print(f"{Cor.AMARELO}üîÅ Simulando {n} chamadas aleat√≥rias...{Cor.RESET}")
        for i in range(n):
            self.inserir_ocorrencia(
                regiao=random.choice(regioes),
                severidade=random.randint(1, 10),
                descricao=f"Inc√™ndio florestal {i+1}"
            )
            time.sleep(0.3)

    def simular_chamadas_crescentes(self, n=5):
        regioes = ['Norte', 'Sul', 'Leste', 'Oeste', 'Centro']
        print(f"{Cor.AMARELO}üîÑ Simulando {n} chamadas com severidade crescente...{Cor.RESET}")
        
        for i in range(n):
            # Severidade aumenta gradualmente
            severidade = min(i + 1 + random.randint(0, 2), 10)
            regiao = random.choice(regioes)
            descricao = f"Inc√™ndio florestal de n√≠vel {severidade}"
            
            self.inserir_ocorrencia(regiao, severidade, descricao)
            time.sleep(0.3)

# ---------- interface ----------

def menu():
    sim = FireResponseSim()
    while True:
        print(f"""{Cor.NEGRITO}
{Cor.AZUL}üî• SIMULADOR DE RESPOSTA A QUEIMADAS üî•{Cor.RESET}
{Cor.NEGRITO}Escolha uma op√ß√£o:{Cor.RESET}
1Ô∏è‚É£  Inserir nova ocorr√™ncia
2Ô∏è‚É£  Atender ocorr√™ncia priorit√°ria
3Ô∏è‚É£  Listar ocorr√™ncias pendentes
4Ô∏è‚É£  Ver hist√≥rico de atendimentos
5Ô∏è‚É£  Gerar relat√≥rio por regi√£o
6Ô∏è‚É£  Gerar gr√°fico de severidade por regi√£o
7Ô∏è‚É£  Simular chamadas aleat√≥rias
8Ô∏è‚É£  Simular chamadas com severidade crescente
9Ô∏è‚É£  Sair
""")
        op = input("üëâ Sua escolha: ")
        if op == '1':
            r = input("Regi√£o: ")
            while True:
                try:
                    s = int(input("üî• Severidade (1-10): "))
                    if 1 <= s <= 10:
                        break
                    else:
                        print(f"{Cor.VERMELHO}‚ùå Insira um valor entre 1 e 10.{Cor.RESET}")
                except ValueError:
                    print(f"{Cor.VERMELHO}‚ùå Valor inv√°lido! Digite um n√∫mero inteiro.{Cor.RESET}")
            d = input("üìù Descri√ß√£o: ")
            sim.inserir_ocorrencia(r, s, d)
        elif op == '2':
            sim.atender_ocorrencia()
        elif op == '3':
            sim.listar_ocorrencias_pendentes()
        elif op == '4':
            sim.listar_historico()
        elif op == '5':
            sim.gerar_relatorio_por_regiao()
        elif op == '6':
            sim.gerar_grafico_severidade_por_regiao()
        elif op == '7':
            n = int(input("N√∫mero de chamadas a simular: "))
            sim.simular_chamadas(n)
        elif op == '8':
            n = int(input("N√∫mero de chamadas a simular: "))
            sim.simular_chamadas_crescentes(n)
        elif op == '9':
            print(f"{Cor.VERDE}üëã Encerrando o simulador. At√© mais!{Cor.RESET}")
            break
        else:
            print(f"{Cor.VERMELHO}‚ùå Op√ß√£o inv√°lida. Tente novamente.{Cor.RESET}")

if __name__ == '__main__':
    menu()
